# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

prompt_time() {
	local time=$(gdate -u '+%F %H:%M:%S')
	echo -e "${time}";
}

prompt_kube_context() {
	echo -e "$(kubectl config current-context)"
}

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\n"; # newline
PS1+="\$(prompt_time) ";
PS1+="\[${bold}\]";
if [[ "${SSH_TTY}" ]]; then
  PS1+="\[${white}\] at ";
  PS1+="\[${hostStyle}\]\h"; # host
fi;
PS1+="\[${green}\]\w"; # working directory
PS1+="\[${orange}\]";
PS1+=" \$(prompt_kube_context)"; # Current kube context
PS1+="\$(prompt_git \"${white} ${violet}\")"; # Git repository details
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

# MY_PS1="";
# DELIM="";

# #colors build
# DEF="\033[0";  #i.e. not bold
# BOLD="\033[1";

# #color codes
# #background
# BLACK_BG="100m";
# RED_BG="101m"; 
# GREEN_BG="102m"; 
# YELLOW_BG="103m"; 
# BLUE_BG="104m"; 
# PURP_BG="45m"; 
# CYAN_BG="106m"; 
# WHITE_BG="107m"; 

# #foreground (text)
# BLACK_FG="90";
# RED_FG="91";
# GREEN_FG="92";
# YELLOW_FG="93";
# BLUE_FG="94";
# PURP_FG="35";
# CYAN_FG="96";
# WHITE_FG="97";
# ##format:  ${DEF|BOLD};${FG color};${BG color}
# ##example:  $BOLD;$BLUE_FG:$BLACK_BG

# #Prompt segments: {color setup}{content}{arrow delimiter}
# ##timestamp
# TIME_SEG="$BOLD;$BLACK_FG;$WHITE_BG";
# TIME_SEG+=" 🕜  \@ ";
# TIME_SEG+="$DEF;$WHITE_FG;$CYAN_BG$DELIM";

# ##user
# DIRECTORY_SEG="$BOLD;$YELLOW_FG;$PURP_BG";
# DIRECTORY_SEG+=" 📂  \w ";
# DIRECTORY_SEG+="$DEF;$PURP_FG;$YELLOW_BG$DELIM";

# ##current directory
# USER_SEG="$BOLD;$BLUE_FG;$CYAN_BG";
# USER_SEG+=" 👤  \u ";
# USER_SEG+="$DEF;$CYAN_FG;$PURP_BG$DELIM";

# ##git
# prompt_git() {
	# local s='';
	# local branchName='';

	# # Check if the current directory is in a Git repository.
	# if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# # check if the current directory is in .git before running git checks
		# if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# # Ensure the index is up to date.
			# git update-index --really-refresh -q &>/dev/null;

			# # Check for uncommitted changes in the index.
			# if ! $(git diff --quiet --ignore-submodules --cached); then
				# s+=' ➕ ';
			# fi;

			# # Check for unstaged changes.
			# if ! $(git diff-files --quiet --ignore-submodules --); then
				# s+='⚠️  ';
			# fi;

			# # Check for untracked files.
			# if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				# s+=' ⁉️ ';
			# fi;

			# # Check for stashed files.
			# if $(git rev-parse --verify refs/stash &>/dev/null); then
				# s+=' ➰ ';
			# fi;

		# fi;

		# # Get the short symbolic ref.
		# # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# # Otherwise, just give up.
		# branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			# git rev-parse --short HEAD 2> /dev/null || \
			# echo '(unknown)')";

		# [ -n "${s}" ] && s=" [${s}]";

		# echo -e " ${branchName} ${s} ";
	# else
		# return;
	# fi;
# }
# GIT_SEG="$BOLD;$BLACK_FG;$YELLOW_BG";
# GIT_SEG+=" ⥺\$(prompt_git) ";
# GIT_SEG+="\[\033[0m\]\[\033[0;93m\]$DELIM";

# #next line
# NEW_LINE="\n\[\033[0m\]";  #new line, default colors
# NEW_LINE+="\033[0;97m";
# NEW_LINE+=" € ";
# NEW_LINE+="\[\033[0m\]";

# #Putting it all together
# MY_PS1=$TIME_SEG;
# MY_PS1+=$USER_SEG;
# MY_PS1+=$DIRECTORY_SEG;
# MY_PS1+=$GIT_SEG;
# MY_PS1+=$NEW_LINE;
# export PS1=$MY_PS1;
