# Simple calculator
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function python-json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Get IP address for boot2docker
# http://viget.com/extend/how-to-use-docker-on-os-x-the-missing-guide
docker-ip() {
  boot2docker ip 2> /dev/null
}

git-remove-all() {
  echo "$1";
  git filter-branch --force --index-filter \
      "git rm --cached -r --ignore-unmatch $1" \
      --prune-empty --tag-name-filter cat -- --all
}

# Reload bash profile
rload() {
  echo "Reloading .bash_profile";
  cat ~/.ssh/config_* > ~/.ssh/config
  source ~/.bash_profile
}

# Grep over the runnable angular client directory
gra() {
  PPWD=$(pwd)
  cd $HOME/runnable/runnable-angular
  grep -inR "$1" --exclude-dir=build ./client/
  cd $PPWD
}

# Grep over the runnable angular client directory
grajs() {
  PPWD=$(pwd)
  cd $HOME/runnable/runnable-angular
  grep -inR "$1" --exclude-dir=build --include \*.js ./client/
  cd $PPWD
}

# Grep over the runnable angular client directory
grajade() {
  PPWD=$(pwd)
  cd $HOME/runnable/runnable-angular
  grep -inR "$1" --exclude-dir=build --include \*.jade ./client
  cd $PPWD
}

# Grep over the runnable angular test directory
grat() {
  PPWD=$(pwd)
  cd $HOME/runnable/runnable-angular
  grep -inR "$1" --exclude-dir=coverage ./test/
  cd $PPWD
}

print_json() {
 pbpaste | python -m json.tool
}

function pushit {
  echo "$1"
  open https://www.youtube.com/watch?v=BhsTmiK7Q2M;
  cd ~/runnable/devops-scripts/ansible;
  ansible-playbook -i ./prod-hosts web.yml -e git_branch="$1";
}

f () {
  find . -name "*$1*"
}

serve () {
  python -m SimpleHTTPServer 8000
}

port () {
  lsof -n -i4TCP:"$1" | grep LISTEN
}

utc () {
	local time=$(gdate -u '+%Y-%m-%dT%H:%M:%S.%3NZ')
	echo -e "${time}";
}

unsetDockerEnvVariables () {
	unset `env | grep DOCKER | cut -d'=' -f 1 | xargs`
}

if [ -a ~/.log-tail-generator.bash ]; then
	source ~/.log-tail-generator.bash
fi;

function flushall {
  mongo --quiet --eval 'db.getMongo().getDBNames().forEach(function(i){db.getSiblingDB(i).dropDatabase()})'
  redis-cli flushall
  rabbitmqctl stop_app; rabbitmqctl reset; rabbitmqctl start_app
}

[ `uname -s` != "Darwin" ] && return

function tab () {
    local cmd=""
    local cdto="$PWD"
    local args="$@"

    if [ -d "$1" ]; then
        cdto=`cd "$1"; pwd`
        args="${@:2}"
    fi

    if [ -n "$args" ]; then
        cmd="; $args"
    fi

    osascript &>/dev/null <<EOF
        tell application "iTerm"
            tell current terminal
                launch session "Default Session"
                tell the last session
                    write text "cd \"$cdto\"$cmd"
                end tell
            end tell
        end tell
EOF
}

function logtail() {
    local app_name="$1"
    local datetime=`date +%Y/%m/%d/%H`
    local app_log_dir="/var/log/runnable"
    local logfile="${app_log_dir}/${datetime}/${app_name}.log"
    tail -f ${logfile} | bunyan
}

function new-branch-from-master () {
	git checkout master
	git pull origin master
	git checkout -b $1
}

function pull-remote-branch () {
	git checkout master
	git pull origin master
	git checkout -b $1
	git pull origin $1
}

function pbtidy () {
 pbpaste | jq '.' | pbcopy
}

function pbecho() {
 pbpaste | jq '.'
}

function timestamp_to_date ()  {
  date -d @$1 -u +"%Y-%m-%dT%H:%M:%SZ"
}

function timestamp_to_local_date ()  {
  date -d @$1 +"%Y-%m-%dT%H:%M:%SZ"
}

alias pbt="pbtidy"
alias pbe="pbecho"

function aws_set_env () {
  export AWS_CURRENT_PROFILE_NAME=$1
  export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile $AWS_CURRENT_PROFILE_NAME)
  export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile $AWS_CURRENT_PROFILE_NAME)
  echo "Set AWS environment to $AWS_CURRENT_PROFILE_NAME with key id $AWS_ACCESS_KEY_ID"
}

function generate-public-key () {
  ssh-keygen -y -f $1 > $1.pub
}

function uuid() {
	if [[ "$1" == "hex" ]]; then
    NEW_UUID=$(python -c 'import sys,uuid; sys.stdout.write(uuid.uuid4().hex)') 
	else
    NEW_UUID=$(python -c 'import sys,uuid; sys.stdout.write(str(uuid.uuid4()))') 
	fi;
  echo $NEW_UUID | pbcopy && pbpaste
}

function generate-key-fingerprint () {
  openssl rsa -in $1 -pubout -outform DER | openssl md5 -c

}

function kstg {
  kubectl --context gke_basilica-211201_us-central1-c_leadgenie $@
}

function kprod {
  kubectl --context gke_basilica-211201_us-central1-c_leadgenie-prod $@
}

function kba {
  kubectl --context gke_basilica-211201_us-central1-c_basilica $@
}

function klogs () {
  POD_NAME=$(kgetbyname $1)
  echo "Pod Name: $POD_NAME"
  kubectl -n $KUBERNETES_NAMESPACE logs -f --tail=20 $POD_NAME -c app
}

function kexec () {
  POD_NAME=$(kgetbyname $1)
  echo "Pod Name: $POD_NAME"
  kubectl -n $KUBERNETES_NAMESPACE exec -it $POD_NAME -c app -- bash
}

function kdescribe () {
  POD_NAME=$(kgetbyname $1)
  echo "Pod Name: $POD_NAME"
  kubectl -n $KUBERNETES_NAMESPACE describe pod $POD_NAME
}

function kget () {
  # TODO: Multiple pods
  # TODO: Better namespace support NAMESPACE variable
  POD_NAME=$(kgetbyname $1)
  echo "Pod Name: $POD_NAME"
  kubectl -n $KUBERNETES_NAMESPACE get pod $POD_NAME -o yaml
}

function kgrep () {
  kubectl -n $KUBERNETES_NAMESPACE get pods | grep $1
}

function kdeletepods () {
 kgetbyname $1 | xargs kubectl -n $KUBERNETES_NAMESPACE delete pod
}

function kgetbyname () {
  if [ -z "$KUBERNETES_NAMESPACE" ]
  then
    echo "No KUBERNETES_NAMESPACE specific"
    return 1
  fi
  kubectl -n $KUBERNETES_NAMESPACE get pods -o jsonpath="{.items[*].metadata.name}" |tr -s '[[:space:]]' '\n' | grep $1
}

function verify_yaml_file () {
  COMMAND="require 'yaml';puts YAML.load_file('./$1')"
  echo $COMMAND
  ruby -e "$COMMAND"
}

function kstgwww {
  kstg exec -it $(kstg get pods | grep www | grep Running | head -n 1 | awk '{print $1}') -- bash
}

function kprodwww {
  kprod exec -it $(kprod get pods | grep www  | grep Running | head -n 1 | awk '{print $1}') -- bash
}

function kstgapp {
  kstg exec -it $(kstg get pods | grep scraper-app | grep Running | head -n 1 | awk '{print $1}') -- bash
}

function kprodapp {
  kprod exec -it $(kprod get pods | grep scraper-app | grep Running | head -n 1 | awk '{print $1}') -- bash
}
